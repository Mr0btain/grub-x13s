#!/bin/bash
set -e
# Version 1.4.2
# TODO Setup per kernel Device Trees

# Define variables
program_dir=/etc/grub-x13s
NL=$'\n'
dir=""
info=()
functions=()

# Import config and descriptions
. "${program_dir}"/config.cfg
. "${program_dir}"/os_desc

add_dtb() {
# Copy dtb for kernel
  dtb=/usr/lib/linux-image${k//[!0-9.xsrc-]/}/qcom/sc8280xp-lenovo-thinkpad-x13s.dtb
  cp ${dtb} /boot/dtbs/sc8280xp-lenovo-thinkpad-x13s${k//[!0-9.xsrc-]/}.dtb
}

setup_other_os() {
  os=$(cut -f1 -d"@" <<< ${os_probe});
  os_part=$(echo "${os%%:*}");
  printf "Getting ${info[0]}'s UUID on ${os_part}.. \n";
  os_uuid=$(blkid -o value -s UUID ${os_part});
  uuid="${os_uuid}";
  printf "${info[0]}'s UUID is ${uuid}, mounting to scan for kernels.. \n";
  dir="/mnt/${info[1]}";
  mkdir -p "${dir}";
  mount "${os_part}" /mnt/"${info[1]}";
  get_kernels;
  add_sub_entries;
  printf "Unmounting ${info[0]} \n";
  umount "${dir}";
}

set_other_os_info() {
  if [[ "${info[0]}" == "Ubuntu" ]]; then
    ubuntu_desc[0]="Ubuntu-Other";
    ubuntu_desc[1]="ubuntu-other";
  elif [[ "${info[0]}" == "Debian" ]]; then
    debian_desc[0]="Debian-Other";
    debian_desc[1]="debian-other";
  elif [[ "${info[0]}" == "Fedora" ]]; then
    fedora_desc[0]="Fedora-Other";
    fedora_desc[1]="fedora-other";
  elif [[ "${info[0]}" == "Arch" ]]; then
    arch_desc[0]="Arch-Other";
    arch_desc[1]="arch-other";
  fi;
}

add_current_os() {
  # Pull info of Current OS
  get_current_info
  # Run for loop to determine what OS were on and set ifo accordingly
  for o in ${os_release[@]}; do
    if [[ "$o" =~ "Ubuntu" ]]; then
      printf "Ubuntu is main OS, adding menu items! \n"
      info=(${ubuntu_desc[@]})
      break;
    elif [[ "$o" =~ "Debian" ]]; then
      printf "Debian is main OS, adding menu items! \n"
      info=(${debian_desc[@]})
      break;
    elif [[ "$o" =~ "Arch" ]]; then
      printf "Arch is main OS, adding menu items! \n"
      info=(${arch_desc[@]})
      break;
    elif [[ "$o" =~ "Fedora" ]]; then
      printf "Fedora is main OS, adding menu items! \n"
      info=(${fedora_desc[@]})
      break;
    fi;
  done;
  # Run Functions to add main OS to first boot entry
  cur="${info[0]}" # This variable will be used later for something not yet implimented
  main_os_entry # Function that actually adds main os entry
  get_kernels # Get the Kernels installed
  add_sub_entries # Add those as submenue items
  set_other_os_info
}

set_boot_entry() {
# Set default bootloader
# This isnt used just yet, coming eventually
  printf "Setting default boot menu entry! \n"
  efibootmgr -c --disk=/dev/nvme0n1p1 --label="${DEFAULT_OS}" --loader='EFI\Boot\DtbLoader.efi'
}

get_current_info() {
  sys_uuid=$(dmidecode -s system-uuid)
  disk=$(mount | grep " / type" | awk '{print $1}')
  uuid=$(blkid -o value -s UUID ${disk})
  main_uuid="${uuid}"
  os_release=$(cat /etc/os-release)
}

get_kernels() {
  # Find installed kernels
  printf " Finding installed kernels for "${info[0]}" \n";
  kernels+=$(find ${dir}${info[2]}*);
  printf "Found Kernels \n";
}

probe() {
  printf "\n Probing for Operating Systems.. \n";
# Probe for different OS'
  os_probed=($(os-prober));

# Ubuntu
  for u in "${os_probed[@]}"; do
    if [[ "$u" =~ "Ubuntu" ]]; then
      printf "Found Ubuntu! adding menu entry \n";
      os_probe=$u;
      add_ubuntu;
      break;
    fi;
  done;
      
  for d in "${os_probed[@]}" ; do
    if [[ "$d" =~ ":Debian" ]] ; then
      printf "Found Debian! adding menu entries \n";
      os_probe=$d;
      add_debian;
      break;
    fi;
  done;

  for f in "${os_probed[@]}"; do
    if [[ "$f" =~ ":Fedora" ]]; then
      printf "Found Fedora! adding menu enties \n";
      os_probe=$f;
      add_fedora;
      break;
    fi;
  done;

  for a in "${os_probed[@]}"; do
    if [[ "$a" =~ ":Arch" ]]; then
      printf "Found Arch! adding menu entries \n";
      os_probe=$a;
      add_arch;
      break;
    fi;
  done;

  for m in "${os_probed[@]}" ; do
    if [[ "$m" =~ "Microsoft" ]] ; then
      printf "Found Windows! adding menu entry \n";
      windows_probe=$m;
      add_windows;
      break;
    fi;
  done;
}

add_ubuntu() {
  # add Ubuntu menu entry
  info=(${ubuntu_desc[@]})
  printf "Adding "${info[0]}" with description: \n"
  printf "'%s'\n" "${info[@]}"
  setup_other_os
  main_os_entry
}

add_debian() {
    # add Debian menu entry
  info=(${debian_desc[@]})
  printf "Adding "${info[0]}" with description: \n"
  printf "'%s'\n" "${info[@]}"
  setup_other_os
  main_os_entry
}

add_fedora() {
    # add Fedora menu entry
  info=(${fedora_desc[@]})
  printf "Adding "${info[0]}" with description: \n"
  printf "'%s'\n" "${info[@]}"
  setup_other_os
  main_os_entry
}

add_arch() {
  # add Arch menu entry
  info=(${arch_desc[@]})
  printf "Adding "${info[0]}" with description: \n"
  printf "'%s'\n" "${info[@]}"
  setup_other_os
  main_os_entry
}

add_windows() {
# Add Windows entry
  printf "Getting windows UUID.. \n"
  windows_part=$(cut -f1 -d"@" <<< ${windows_probe})
  windows_uuid=$(blkid -o value -s UUID ${windows_part})
  printf "Windows UUID is ${windows_uuid} \n Adding menu entry \n"
  os_entries+=(
    "menuentry 'Windows Boot Manager (on ${windows_part})' --class windows {
	      insmod part_gpt
	      insmod fat
	  search --no-floppy --fs-uuid --set=root "${windows_uuid}"
	  chainloader /EFI/Microsoft/Boot/bootmgfw.efi
    } ${NL}"
  );
  printf "\n"
}

add_sub_entries() {
  printf "Adding menu entry for each of "${info[0]}"'s Kernels in submenu.. \n";
  for k in $kernels[@]; do
    if [[ $k =~ "." ]]; then
      init=${info[3]}
      linux=${k}
      devtree=sc8280xp-lenovo-thinkpad-x13s${k//[!0-9.xsrc-]/}.dtb
      printf "Adding kernel ${linux//"[@]"} \n"
      sub_entries+=(
        "menuentry '${info[0]} Linux ${k//[!0-9.xsrc-]/}' --class "${info[1]}" {
	          insmod gzio
	          insmod part_gpt
	          insmod ext2
	      search --no-floppy --fs-uuid --set=root "${uuid}"
	      linux	${linux//"[@]"} root=UUID="${uuid}" "${OPTIONS}"
	      initrd	${init//"[@]"}${k//[!0-9.xsrc-]/}
        devicetree /boot/dtbs/${devtree}
        } ${NL}"
        );
      add_dtb;
    fi;
  done;
  # Add submenu to submenues array
  submenues+=(
    "submenu 'Previous Kernels for ${info[1]}' {
      ${sub_entries[@]}
    } ${NL}"
    );
  # Clear the sub entries just in case so they dont get inter mingled
  unset sub_entries;
  unset kernels;
}

main_os_entry() {
  linux=${info[2]}
  init=${info[3]}
  devtree=sc8280xp-lenovo-thinkpad-x13s.dtb
  unm="$(uname -r)"
  os_entries+=(
    "menuentry '${info[0]}' --class "${info[1]}" {
        insmod gzio
	      insmod part_gpt
	      insmod ext2

	if [ x$grub_platform = xxen ]; then insmod xzio; insmod lzopio; fi
	  search --no-floppy --fs-uuid --set=root "${uuid}"
	  linux   ${linux//][@} root=UUID="${uuid}" "${OPTIONS}"
	  initrd  ${init//][@}
    devicetree /boot/dtbs/"${devtree}"
    } ${NL}"
  );
  cp /usr/lib/linux-image-${unm}/qcom/${devtree} /boot/dtbs/${devtree};

}

make_grub_config() {
# Make grub config
  printf "Making config file for grub in program file directory \n"
cat <<EOF > "${program_dir}"/Boot/grub.cfg
insmod part_gpt
insmod part_msdos
insmod part_ext2
insmod gfxmenu
insmod all_video
insmod vga
insmod png

function savedefault {
  if [ -z "${boot_once}" ]; then
    saved_entry="${chosen}"
    save_env saved_entry
  fi
}

${os_entries[@]}

${submenues[@]}

EOF

printf "Made grub.cfg with these boot flags: \n"
printf "${OPTIONS[@]} \n"
}

make_boot() {
# Fixup the Grub bootloader
  printf "Making Standalone grub binary.. \n"
  (
    grub-mkstandalone \
        --format=arm64-efi \
        --output="${program_dir}"/Boot/grubaa64.efi \
        --directory="${program_dir}"/grub-arm64-efi \
        --locales="" \
        "boot/grub/grub.cfg="${program_dir}"/Boot/grub.cfg"
  )

# Copy the created files and DtbLoader to efi
#  printf "Add DtbLoader as fallback bootaa64. just in case \n"
#  cp "${program_dir}"/Boot/bootaa64.efi "${DEFAULT_ESP}"/EFI/Boot/
#  printf "Add DtbLoader as DtbLoader.efi for default bootloader entry if you desire to set it \n"
#  cp "${program_dir}"/Boot/bootaa64.efi "${DEFAULT_ESP}"/EFI/Boot/DtbLoader.efi
  printf "\n"
  printf "Add Grub standalone \n"
  cp "${program_dir}"/Boot/grubaa64.efi "${DEFAULT_ESP}"/EFI/Boot/bootaa64.efi
  printf "Add Grub config file \n"
  cp "${program_dir}"/Boot/grub.cfg "${DEFAULT_ESP}"/EFI/Boot/
}

main() {
# Do the stuff
  printf "Fixing up the bootloader!
  Boot flags are ${OPTIONS[@]}
  These can be changed along with a few other config options at /etc/grub-x13s/config.cfg
  NOTE: make sure your initramfs-tools modules file includes the correct modules!!!
  Double check for errors, ive made many in mine haha. \n"
  printf "\n"
  mkdir -p /boot/dtbs
  add_current_os
  probe
  make_grub_config
  make_boot
  printf "The Ole Girl should be ready to boot \n"
}

# Start
main;
